// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceMarketplace.Data;

#nullable disable

namespace ServiceMarketplace.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("ServiceMarketplace.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessID")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Cost")
                        .HasColumnType("REAL");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessID = 1,
                            Cost = 100f,
                            CustomerID = 1,
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(2024, 7, 16, 0, 16, 23, 265, DateTimeKind.Local).AddTicks(6994),
                            ServiceId = 1,
                            StartTime = new DateTime(2024, 7, 15, 23, 16, 23, 265, DateTimeKind.Local).AddTicks(6941),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            BusinessID = 2,
                            Cost = 150f,
                            CustomerID = 2,
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(2024, 7, 17, 0, 16, 23, 265, DateTimeKind.Local).AddTicks(7001),
                            ServiceId = 2,
                            StartTime = new DateTime(2024, 7, 16, 23, 16, 23, 265, DateTimeKind.Local).AddTicks(6999),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            BusinessID = 3,
                            Cost = 200f,
                            CustomerID = 3,
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(2024, 7, 18, 0, 16, 23, 265, DateTimeKind.Local).AddTicks(7006),
                            ServiceId = 3,
                            StartTime = new DateTime(2024, 7, 17, 23, 16, 23, 265, DateTimeKind.Local).AddTicks(7004),
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            BusinessID = 4,
                            Cost = 250f,
                            CustomerID = 4,
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(2024, 7, 19, 0, 16, 23, 265, DateTimeKind.Local).AddTicks(7012),
                            ServiceId = 4,
                            StartTime = new DateTime(2024, 7, 18, 23, 16, 23, 265, DateTimeKind.Local).AddTicks(7010),
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            BusinessID = 5,
                            Cost = 300f,
                            CustomerID = 5,
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(2024, 7, 20, 0, 16, 23, 265, DateTimeKind.Local).AddTicks(7018),
                            ServiceId = 5,
                            StartTime = new DateTime(2024, 7, 19, 23, 16, 23, 265, DateTimeKind.Local).AddTicks(7016),
                            Status = 1
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Business 1",
                            Name = "Business 1",
                            PhoneNumber = "5555555551"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Business 2",
                            Name = "Business 2",
                            PhoneNumber = "5555555552"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Business 3",
                            Name = "Business 3",
                            PhoneNumber = "5555555553"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Business 4",
                            Name = "Business 4",
                            PhoneNumber = "5555555554"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Business 5",
                            Name = "Business 5",
                            PhoneNumber = "5555555555"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.BusinessUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 1,
                            Email = "businessuser1a@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = true,
                            LastName = "1A",
                            Password = "password",
                            PhoneNumber = "5555555551",
                            Username = "businessuser1a"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 1,
                            Email = "businessuser1b@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = false,
                            LastName = "1B",
                            Password = "password",
                            PhoneNumber = "5555555552",
                            Username = "businessuser1b"
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 1,
                            Email = "businessuser2a@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = true,
                            LastName = "2A",
                            Password = "password",
                            PhoneNumber = "5555555551",
                            Username = "businessuser2a"
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 1,
                            Email = "businessuser2b@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = false,
                            LastName = "2B",
                            Password = "password",
                            PhoneNumber = "5555555552",
                            Username = "businessuser2b"
                        },
                        new
                        {
                            Id = 5,
                            AccountType = 1,
                            Email = "businessuser3a@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = true,
                            LastName = "3A",
                            Password = "password",
                            PhoneNumber = "5555555551",
                            Username = "businessuser3a"
                        },
                        new
                        {
                            Id = 6,
                            AccountType = 1,
                            Email = "businessuser3b@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = false,
                            LastName = "3B",
                            Password = "password",
                            PhoneNumber = "5555555552",
                            Username = "businessuser3b"
                        },
                        new
                        {
                            Id = 7,
                            AccountType = 1,
                            Email = "businessuser4a@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = true,
                            LastName = "4A",
                            Password = "password",
                            PhoneNumber = "5555555551",
                            Username = "businessuser4a"
                        },
                        new
                        {
                            Id = 8,
                            AccountType = 1,
                            Email = "businessuser4b@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = false,
                            LastName = "4B",
                            Password = "password",
                            PhoneNumber = "5555555552",
                            Username = "businessuser4b"
                        },
                        new
                        {
                            Id = 9,
                            AccountType = 1,
                            Email = "businessuser5a@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = true,
                            LastName = "5A",
                            Password = "password",
                            PhoneNumber = "5555555551",
                            Username = "businessuser5a"
                        },
                        new
                        {
                            Id = 10,
                            AccountType = 1,
                            Email = "businessuser5b@gmail.com",
                            FirstName = "BusinessUser",
                            IsAdmin = false,
                            LastName = "5B",
                            Password = "password",
                            PhoneNumber = "5555555552",
                            Username = "businessuser5b"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.CustomerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CustomerUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 0,
                            Email = "customer1@yahoo.com",
                            FirstName = "Customer",
                            LastName = "One",
                            Password = "password1",
                            PhoneNumber = "5555555555",
                            Username = "customer1"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 0,
                            Email = "customer2@yahoo.com",
                            FirstName = "Customer",
                            LastName = "Two",
                            Password = "password2",
                            PhoneNumber = "5555555555",
                            Username = "customer2"
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 0,
                            Email = "customer3@yahoo.com",
                            FirstName = "Customer",
                            LastName = "Three",
                            Password = "password3",
                            PhoneNumber = "5555555555",
                            Username = "customer3"
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 0,
                            Email = "customer4@yahoo.com",
                            FirstName = "Customer",
                            LastName = "Four",
                            Password = "password4",
                            PhoneNumber = "5555555555",
                            Username = "customer4"
                        },
                        new
                        {
                            Id = 5,
                            AccountType = 0,
                            Email = "customer5@yahoo.com",
                            FirstName = "Customer",
                            LastName = "Five",
                            Password = "password5",
                            PhoneNumber = "5555555555",
                            Username = "customer5"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentInquiriesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            Description = "Description for Service 1",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Price = 50.0,
                            Rating = 1.0,
                            ServiceName = "Service 1"
                        },
                        new
                        {
                            Id = 2,
                            BusinessId = 2,
                            Description = "Description for Service 2",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Price = 60.0,
                            Rating = 2.0,
                            ServiceName = "Service 2"
                        },
                        new
                        {
                            Id = 3,
                            BusinessId = 3,
                            Description = "Description for Service 3",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Price = 70.0,
                            Rating = 3.0,
                            ServiceName = "Service 3"
                        },
                        new
                        {
                            Id = 4,
                            BusinessId = 4,
                            Description = "Description for Service 4",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Price = 80.0,
                            Rating = 4.0,
                            ServiceName = "Service 4"
                        },
                        new
                        {
                            Id = 5,
                            BusinessId = 5,
                            Description = "Description for Service 5",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Price = 90.0,
                            Rating = 5.0,
                            ServiceName = "Service 5"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.ServiceAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceAvailability");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 6, 1),
                            Summary = "Freezing",
                            TemperatureC = -5
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2023, 6, 2),
                            Summary = "Bracing",
                            TemperatureC = 0
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2023, 6, 3),
                            Summary = "Chilly",
                            TemperatureC = 5
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2023, 6, 4),
                            Summary = "Cool",
                            TemperatureC = 10
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2023, 6, 5),
                            Summary = "Mild",
                            TemperatureC = 15
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2023, 6, 6),
                            Summary = "Warm",
                            TemperatureC = 20
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2023, 6, 7),
                            Summary = "Balmy",
                            TemperatureC = 25
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2023, 6, 8),
                            Summary = "Hot",
                            TemperatureC = 30
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2023, 6, 9),
                            Summary = "Sweltering",
                            TemperatureC = 35
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2023, 6, 10),
                            Summary = "Scorching",
                            TemperatureC = 40
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Business", b =>
                {
                    b.OwnsOne("ServiceMarketplace.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BusinessId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Zipcode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");

                            b1.HasData(
                                new
                                {
                                    BusinessId = 1,
                                    City = "City 1",
                                    State = "State 1",
                                    Street = "Street 1",
                                    Zipcode = "Zip1"
                                },
                                new
                                {
                                    BusinessId = 2,
                                    City = "City 2",
                                    State = "State 2",
                                    Street = "Street 2",
                                    Zipcode = "Zip2"
                                },
                                new
                                {
                                    BusinessId = 3,
                                    City = "City 3",
                                    State = "State 3",
                                    Street = "Street 3",
                                    Zipcode = "Zip3"
                                },
                                new
                                {
                                    BusinessId = 4,
                                    City = "City 4",
                                    State = "State 4",
                                    Street = "Street 4",
                                    Zipcode = "Zip4"
                                },
                                new
                                {
                                    BusinessId = 5,
                                    City = "City 5",
                                    State = "State 5",
                                    Street = "Street 5",
                                    Zipcode = "Zip5"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Review", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.Service", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Service", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}

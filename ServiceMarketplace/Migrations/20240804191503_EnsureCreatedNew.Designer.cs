// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceMarketplace.Data;

#nullable disable

namespace ServiceMarketplace.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240804191503_EnsureCreatedNew")]
    partial class EnsureCreatedNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = "9a54338d-49f5-420b-904e-a7d6b94ef8ed",
                            ServiceId = 1,
                            Status = 0,
                            TimeSlotId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = "1633f073-0193-4bed-815e-db4cdeaf4713",
                            ServiceId = 2,
                            Status = 1,
                            TimeSlotId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = "9a54338d-49f5-420b-904e-a7d6b94ef8ed",
                            ServiceId = 3,
                            Status = 2,
                            TimeSlotId = 3
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Providing top-notch alpha services.",
                            Name = "Alpha Services",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Innovative solutions for your business needs.",
                            Name = "Beta Solutions",
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Your go-to partner for business growth.",
                            Name = "Gamma Enterprises",
                            PhoneNumber = "5551234567"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.BusinessUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            IsAdmin = true,
                            UserId = "2a0ee853-cec6-421c-b705-fcb67eecc5cd"
                        },
                        new
                        {
                            Id = 2,
                            BusinessId = 2,
                            IsAdmin = true,
                            UserId = "2a0ee853-cec6-421c-b705-fcb67eecc5cd"
                        },
                        new
                        {
                            Id = 3,
                            BusinessId = 3,
                            IsAdmin = true,
                            UserId = "2a0ee853-cec6-421c-b705-fcb67eecc5cd"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentInquiriesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "I love this service. Repeat customer!",
                            CustomerId = "9a54338d-49f5-420b-904e-a7d6b94ef8ed",
                            ParentReviewId = 0,
                            Rating = 5f,
                            ServiceId = 1,
                            TimeStamp = new DateTime(2024, 8, 4, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1315)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Service was okay. Would use again.",
                            CustomerId = "1633f073-0193-4bed-815e-db4cdeaf4713",
                            ParentReviewId = 0,
                            Rating = 3f,
                            ServiceId = 2,
                            TimeStamp = new DateTime(2024, 8, 2, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1319)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "BEWARE!! SEO did not work!!",
                            CustomerId = "9a54338d-49f5-420b-904e-a7d6b94ef8ed",
                            ParentReviewId = 0,
                            Rating = 1f,
                            ServiceId = 3,
                            TimeStamp = new DateTime(2024, 7, 25, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1323)
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            Description = "Building modern and responsive websites.",
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Price = 50.0,
                            Rating = 1.0,
                            ServiceName = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            BusinessId = 2,
                            Description = "Creating stunning visual content.",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Price = 75.0,
                            Rating = 2.0,
                            ServiceName = "Graphic Design"
                        },
                        new
                        {
                            Id = 3,
                            BusinessId = 3,
                            Description = "Improving your website ranking on search engines.",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            Price = 100.0,
                            Rating = 3.0,
                            ServiceName = "SEO Optimization"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.ServiceAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DaysAvailable")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceAvailability");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("TimeSlot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1249),
                            ServiceId = 1,
                            StartTime = new DateTime(2024, 8, 14, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1205)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1254),
                            ServiceId = 2,
                            StartTime = new DateTime(2024, 8, 14, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1252)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1258),
                            ServiceId = 3,
                            StartTime = new DateTime(2024, 8, 14, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1256)
                        },
                        new
                        {
                            Id = 4,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1261),
                            ServiceId = 1,
                            StartTime = new DateTime(2024, 8, 5, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1260)
                        },
                        new
                        {
                            Id = 5,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1264),
                            ServiceId = 2,
                            StartTime = new DateTime(2024, 8, 5, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1263)
                        },
                        new
                        {
                            Id = 6,
                            EndTime = new DateTime(2024, 8, 5, 15, 15, 3, 650, DateTimeKind.Local).AddTicks(1267),
                            ServiceId = 3,
                            StartTime = new DateTime(2024, 8, 5, 14, 15, 3, 650, DateTimeKind.Local).AddTicks(1266)
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a54338d-49f5-420b-904e-a7d6b94ef8ed",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            Address = "612 Warf Avenue",
                            City = "Seattle",
                            ConcurrencyStamp = "7e65148a-dde7-4d06-af7b-63167241d7b6",
                            Email = "USER1@SERVICEMARKETPLACE.COM",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@SERVICEMARKETPLACE.COM",
                            NormalizedUserName = "USER1@SERVICEMARKETPLACE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFUa3HVeP4+S2/E32pkeZZMOUYO7iHDiB798julo60qLP4Z2DG7ihCHMSMijgCR7g==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c1e0784-d303-4bf0-ae7b-1d9611e1d52a",
                            State = "WA",
                            TwoFactorEnabled = false,
                            UserName = "user1@servicemarketplace.com",
                            ZipCode = "66666"
                        },
                        new
                        {
                            Id = "1633f073-0193-4bed-815e-db4cdeaf4713",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            Address = "612 Warf Avenue",
                            City = "Seattle",
                            ConcurrencyStamp = "fc3f1e6d-1fa7-4c5b-9586-0a1bd3c79154",
                            Email = "USER2@SERVICEMARKETPLACE.COM",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@SERVICEMARKETPLACE.COM",
                            NormalizedUserName = "USER2@SERVICEMARKETPLACE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFUa3HVeP4+S2/E32pkeZZMOUYO7iHDiB798julo60qLP4Z2DG7ihCHMSMijgCR7g==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95c9fd03-49ce-4cba-9666-cb170130088b",
                            State = "WA",
                            TwoFactorEnabled = false,
                            UserName = "user2@servicemarketplace.com",
                            ZipCode = "66666"
                        },
                        new
                        {
                            Id = "2a0ee853-cec6-421c-b705-fcb67eecc5cd",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            Address = "612 Warf Avenue",
                            City = "Seattle",
                            ConcurrencyStamp = "5710e0d0-baa2-40c6-8f27-ae7d5fdc89d5",
                            Email = "USER3@SERVICEMARKETPLACE.COM",
                            EmailConfirmed = false,
                            FirstName = "Jack",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@SERVICEMARKETPLACE.COM",
                            NormalizedUserName = "USER3@SERVICEMARKETPLACE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFUa3HVeP4+S2/E32pkeZZMOUYO7iHDiB798julo60qLP4Z2DG7ihCHMSMijgCR7g==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8547f79a-a872-4665-9f93-b0bdd1953f6c",
                            State = "WA",
                            TwoFactorEnabled = false,
                            UserName = "user3@servicemarketplace.com",
                            ZipCode = "66666"
                        });
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceMarketplace.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Booking", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Business", b =>
                {
                    b.OwnsOne("ServiceMarketplace.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BusinessId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Coordinate")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Zipcode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");

                            b1.HasData(
                                new
                                {
                                    BusinessId = 1,
                                    City = "Townsville",
                                    Coordinate = "",
                                    State = "TS",
                                    Street = "123 Main St, TS ",
                                    Zipcode = "12345"
                                },
                                new
                                {
                                    BusinessId = 2,
                                    City = "Villageton",
                                    Coordinate = "",
                                    State = "VS",
                                    Street = "456 Oak St",
                                    Zipcode = "67890"
                                },
                                new
                                {
                                    BusinessId = 3,
                                    City = "Cityburg",
                                    Coordinate = "",
                                    State = "CB",
                                    Street = "789 Pine St",
                                    Zipcode = "11223"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Review", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.Service", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.TimeSlot", b =>
                {
                    b.HasOne("ServiceMarketplace.Entities.Service", null)
                        .WithMany("TimeSlots")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceMarketplace.Entities.Service", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
